image: node:16

stages:
  - deploy
  - start
  - stop
  - remove

variables:
  AWS_DEFAULT_REGION: ${{ values.region }}
  DEFAULT_JOB: 'false'
  START_JOB: 'false'
  STOP_JOB: 'false'
  REMOVE_JOB: 'false'

deploy_to_aws:
  stage: deploy
  before_script:
    - FAILURE_MESSAGE="Must define \$AWS_ACCESS_KEY_ID and \$AWS_SECRET_KEY. Add keys to $CI_PROJECT_URL/-/settings/ci_cd"
    - test -z "$AWS_SECRET_KEY" && echo $FAILURE_MESSAGE && exit 1
    - test -z "$AWS_ACCESS_KEY_ID" && echo $FAILURE_MESSAGE && exit 1
    - npm install
    - npm install -g serverless
  script:
    - serverless deploy --stage ${{ values.stage }} --verbose
  rules:
    - if: $DEFAULT_JOB == "true"

starting:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: start
  script:
    - aws lambda invoke --function-name ${{ values.componentId }}-start test.log
  rules:
    - if: $START_JOB == "true"

stopping:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: stop
  script:
    - aws lambda invoke --function-name ${{ values.componentId }}-stop test.log
  rules:
    - if: $STOP_JOB == "true"

removing:
  stage: remove
  before_script:
    - FAILURE_MESSAGE="Must define \$AWS_ACCESS_KEY_ID and \$AWS_SECRET_KEY. Add keys to $CI_PROJECT_URL/-/settings/ci_cd"
    - test -z "$AWS_SECRET_KEY" && echo $FAILURE_MESSAGE && exit 1
    - test -z "$AWS_ACCESS_KEY_ID" && echo $FAILURE_MESSAGE && exit 1
    - npm install
    - npm install -g serverless
  script:
    - serverless remove --stage ${{ values.stage }} --verbose
  rules:
    - if: $REMOVE_JOB == "true"