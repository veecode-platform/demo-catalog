
name: Build Publish Spring Boot 

on:
  push:
    branches: [ master ]

jobs:
  build-project:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ values.javaVersion }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ values.javaVersion }}
          distribution: 'adopt'
      
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      
      - name: Build with Gradle
        env:
          BOOT_DOCKER_USERNAME: ${{'${{'}} secrets.DOCKER_USERNAME ${{'}}'}} #used by build.gradle
          BOOT_DOCKER_PASSWORD: ${{'${{'}} secrets.DOCKER_PASSWORD ${{'}}'}} #used by build.gradle      
        run: |
          ./gradlew bootBuildImage \
          {%- if values.docker_window == 'custom' %}
          --imageName=${{ values.docker_generic }}/${{ values.docker_organization }}/${{values.componentId}}:latest \
          {%- endif %}
          {%- if values.docker_window == 'default' %}
          --imageName=docker.io/${{ values.docker_organization }}/${{values.componentId}}:latest \
          {%- endif %}
          --publishImage

      - name: Setting up kubectl client
        uses: azure/setup-kubectl@v3
        with:
           version: 'latest' # default is latest stable
        id: install

      - name: Creating K8s Artifacts
        run: |
          mkdir k8s/
          mkdir config/
          touch config/${{values.componentId}}.yaml
          kubectl create deployment ${{values.componentId}} --namespace=vkpr --port=${{ values.applicationPort }} --replicas=1 \
          {%- if values.docker_window == 'custom' %}
          --image=${{ values.docker_generic }}/${{ values.docker_organization }}/${{values.componentId}}:latest --dry-run=client -o=yaml > ./k8s/deployment.yaml
          {%- endif %}
          {%- if values.docker_window == 'default' %}
          --image=docker.io/${{ values.docker_organization }}/${{values.componentId}}:latest --dry-run=client -o=yaml > ./k8s/deployment.yaml
          {%- endif %}
          yq e '''
          .metadata.labels."backstage.io/kubernetes-id"= "${{values.componentId}}" |
          .spec.template.metadata.labels."backstage.io/kubernetes-id"= "${{values.componentId}}" |
          .spec.template.spec.containers[0].imagePullPolicy= "IfNotPresent" |
          .spec.template.spec.containers[0].resources.requests.memory= "256Mi" |
          .spec.template.spec.containers[0].resources.limits.memory= "768Mi" |
          .spec.template.metadata.annotations."sidecar.opentelemetry.io/inject"= "true" |
          .spec.template.metadata.annotations."instrumentation.opentelemetry.io/inject-java"= "true" |
          del(.status) | del(.metadata.creationTimestamp) | del(.spec.template.metadata.creationTimestamp) | del(.spec.strategy)
          ''' -i ./k8s/deployment.yaml

          kubectl create service clusterip ${{values.componentId}}-service-0 --namespace=vkpr \
          --tcp=${{ values.applicationPort }}:${{ values.applicationPort }} --dry-run=client -o=yaml > ./k8s/service.yaml
          yq e '''
          .metadata.annotations."sidecar.opentelemetry.io/inject"= "true" |
          .metadata.annotations."instrumentation.opentelemetry.io/inject-java"= "true" |
          del(.metadata.creationTimestamp) | del(.status) |
          .metadata.labels."backstage.io/kubernetes-id"="${{values.componentId}}"''' -i ./k8s/service.yaml
          yq e '.spec.selector.app="${{values.componentId}}"' -i ./k8s/service.yaml

          kubectl create ingress ${{values.componentId}} --class=kong --namespace=vkpr \
          --annotation "cert-manager.io/cluster-issuer"="certmanager-issuer" \
          --annotation "konghq.com/https-redirect-status-code"="308" \
          --annotation "kubernetes.io/tls-acme"="true" \
          --annotation "konghq.com/strip-path"="true" \
          --annotation "konghq.com/preserve-host"="true" \
          --annotation "konghq.com/protocols"="https" \
          --annotation "sidecar.opentelemetry.io/inject"="true" \
          --annotation "instrumentation.opentelemetry.io/inject-java"="true" \
          --rule="rest.apr.vee.codes/${{values.componentId}}*=${{values.componentId}}-service-0:${{ values.applicationPort }},tls=rest.apr.vee.codes-tls" --dry-run=client -o=yaml > ./k8s/ingress.yaml
          yq e 'del(.metadata.creationTimestamp) | del(.status)' -i ./k8s/ingress.yaml
          yq e '.metadata.labels."backstage.io/kubernetes-id"="${{values.componentId}}"' -i ./k8s/ingress.yaml

          yq e '''
              .apiVersion="argoproj.io/v1alpha1" |
              .kind="Application" |
              .metadata.name="${{values.componentId}}" |
              .metadata.namespace="argocd" |
              .spec.project="default" |
              .spec.source.repoURL="https://github.com/${{ values.argoRepoUrl }}.git" |
              .spec.source.targetRevision="${{ values.argoRepoBranch }}" |
              .spec.source.path="${{values.componentId}}/" |
              .spec.syncPolicy.automated.prune=true |
              .spec.destination.server="https://kubernetes.default.svc" |
              .spec.destination.namespace="vkpr"''' -i config/${{values.componentId}}.yaml

      {%- if values.observability_window %}   
       
      - name: Check grafana url
        run: |
          export GRAFANA_URL=${{values.observability_grafana}}
          echo "CHECKED_URL=${GRAFANA_URL%/}"
          echo "CHECKED_URL=${GRAFANA_URL%/}" >> $GITHUB_ENV
          
      - name: Creating K8s Dashboards Artifacts
        run: |
              export UID_METRICS_DASHBOARD=$(curl -H "Authorization: Bearer ${{'${{'}} secrets.GRAFANA_API_TOKEN ${{'}}'}}" --url ${{'${{'}} env.CHECKED_URL ${{'}}'}}/api/datasources | jq '.[] | select(.type == "prometheus")'.uid)
              export UID_LOG_DASHBOARD=$(curl -H "Authorization: Bearer ${{'${{'}} secrets.GRAFANA_API_TOKEN ${{'}}'}}" --url ${{'${{'}} env.CHECKED_URL ${{'}}'}}/api/datasources | jq '.[] | select(.type == "loki")'.uid)
              export UID_TRACE_DASHBOARD=$(curl -H "Authorization: Bearer ${{'${{'}} secrets.GRAFANA_API_TOKEN ${{'}}'}}" --url ${{'${{'}} env.CHECKED_URL ${{'}}'}}/api/datasources | jq '.[] | select(.type == "jaeger")'.uid)
      
              jq "(.panels[].datasource | select(.type == \"jaeger\")).uid |= $UID_TRACE_DASHBOARD" dashboards/jaeger-trace.json > jaeger-trace-${{values.componentId}}.json
              kubectl create configmap jaeger-trace-${{values.componentId}} --from-file=./jaeger-trace-${{values.componentId}}.json --dry-run=client -o=yaml > dashboards/jaeger-trace.yml
              yq eval ".metadata.labels.grafana_dashboard=\"vkpr\" | del(.metadata.creationTimestamp)" -i dashboards/jaeger-trace.yml

              jq "(.panels[].datasource | select(.type == \"loki\")).uid |= $UID_LOG_DASHBOARD" dashboards/loki-logs.json > loki-logs-${{values.componentId}}.json
              kubectl create configmap loki-logs-${{values.componentId}} --from-file=./loki-logs-${{values.componentId}}.json --dry-run=client -o=yaml > dashboards/loki-logs.yml
              yq eval ".metadata.labels.grafana_dashboard=\"vkpr\" | del(.metadata.creationTimestamp)" -i dashboards/loki-logs.yml

              jq "(.panels[].datasource | select(.type == \"prometheus\")).uid |= $UID_METRICS_DASHBOARD" dashboards/kong-metrics.json > kong-metrics-${{values.componentId}}.json
              kubectl create configmap kong-metrics-${{values.componentId}} --from-file=./kong-metrics-${{values.componentId}}.json --dry-run=client -o=yaml > dashboards/kong-metrics.yml
              yq eval ".metadata.labels.grafana_dashboard=\"vkpr\" | del(.metadata.creationTimestamp)" -i dashboards/kong-metrics.yml
              
              cp ./dashboards/*.yml ./k8s

      {%- endif %}
      {%- if values.exportKongKubernetes %}

      - name: Setup Insomnia CLI
        uses: kong/setup-inso@v1
        with:
          inso-version: 3.12.0

      - name: Generating Kubernetes config for Kong
        run: |
          inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml
      {%- endif %}

      - name: Publish K8S Artifact
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{'${{'}} secrets.API_TOKEN_GITHUB ${{'}}'}}
        with:
          use_rsync: true
          source_file: 'k8s/'
          destination_repo: ${{ values.argoRepoUrl }}
          destination_folder: '/${{ values.componentId }}/'
          destination_branch: '${{ values.argoRepoBranch }}'
          user_email: 'veecode-bot@vee.codes'
          user_name: 'veecode-bot'
          commit_message: 'Moving k8s ${{ values.componentId }} artefacts'
      
      - name: Publish ArgoCD Application config
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{'${{'}} secrets.API_TOKEN_GITHUB ${{'}}'}}
        with:
          use_rsync: true
          source_file: 'config/'
          destination_repo: ${{ values.argoRepoUrl }}
          destination_folder: '/config/'
          destination_branch: '${{ values.argoRepoBranch }}'
          user_email: 'veecode-bot@vee.codes'
          user_name: 'veecode-bot'
          commit_message: 'Configuring ${{ values.componentId }} argocd application'

  publish-spec:
    runs-on: ubuntu-latest
    env:
      MOCK_SERVER: "${{ values.mockserverUrl }}"
      NAME: ""    
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/local/bin/yq
          yq --version

      - name: "Check if insomnia workspace is present"
        id: check_inso_workspace
        uses: andstor/file-existence-action@v1
        with:
          files: ".insomnia/ApiSpec/spc_*.yml"

      - name: Setup Insomnia CLI
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        uses: kong/setup-inso@v1
        with:
          inso-version: 3.12.0

      - name: Exporting openapi from insomnia workspace
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        run: |
          inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')"  --output ./openapi-swagger.yaml

      - name: Publishing spec to mockserver
        if: "${{'${{'}} env.MOCK_SERVER != '' ${{'}}'}}"
        continue-on-error: true
        run: |
          NAME=`echo $GITHUB_REPOSITORY |awk -F / '{print $2 }'`
          touch MOCK.yaml
          yq 'with(.paths; with_entries(.key |=strenv(NAME) + .))' ./openapi-swagger.yaml >> MOCK.yaml
          cat MOCK.yaml | python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))' > MOCK.json
          curl --max-time 30 -v -X PUT "${{'${{'}} env.MOCK_SERVER ${{'}}'}}/mockserver/openapi$([ ! -z "$API_KEY" ] && echo "?apikey=${{ secrets.API_KEY }}")" -d "{"specUrlOrPayload": $(cat $PWD/MOCK.json)}"
          echo "Adding mockserver address to spec"
          yq ".servers += [{\"url\": \"${{'${{'}} env.MOCK_SERVER ${{'}}'}}$([[ ! "${{'${{'}} env.MOCK_SERVER ${{'}}'}}" == */ ]] && echo "/")${NAME}\"}]" -i ./openapi-swagger.yaml

      - name: Build devportal template
        env:
          NAME: ""
          PATH_API: ""
          TAGS: "${{values.specTags}}"
        run: |
          mkdir -p api/
          NAME=`echo $GITHUB_REPOSITORY |awk -F / '{print $2 }'`
          echo $NAME
          touch "api/$NAME.yaml"
          sed --in-place "s|\"|'|g" ./openapi-swagger.yaml
          yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i "api/$NAME.yaml"
          yq eval ".kind = \"API\" " -i "api/$NAME.yaml"
          yq eval ".metadata.name=strenv(NAME)" -i "api/$NAME.yaml"
          yq eval ".metadata.title=strenv(NAME)" -i "api/$NAME.yaml"
          yq eval ".metadata.publishedAt=\"$(date '+%Y-%m-%d %T')\"" -i "api/$NAME.yaml"
          yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i "api/$NAME.yaml"
          yq eval ".metadata.tags = (strenv(TAGS) | sub(\" +\", \"\") | split(\",\"))" -i "api/$NAME.yaml"
          yq eval ".spec.type = \"openapi\"" -i "api/$NAME.yaml"
          yq eval ".spec.lifecycle = \"production\"" -i "api/$NAME.yaml"
          yq eval ".spec.owner = \"consumer\"" -i "api/$NAME.yaml"
          yq eval ".spec.definition = \"$(yq -I4 ./openapi-swagger.yaml)\"" --inplace "api/$NAME.yaml"

      - name: Publish to spec house
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{'${{'}} secrets.API_TOKEN_GITHUB ${{'}}'}}
        with:
          destination_branch: ${{ values.specPublishBranch }}
          source_file:  'api'
          destination_repo: ${{ values.specPublish }}
          destination_folder: '/'
          user_name: ${{'${{'}} github.actor ${{'}}'}}
          commit_message: 'Pipeline commit'
