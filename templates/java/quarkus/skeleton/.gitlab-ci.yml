image: ubuntu:latest

stages:
  - build
  - publish_k8s
  {%- if values.kongExport %}
  - export_kong
  {%- endif %}
  - publish_spec
  {%- if values.observability_window == "custom" %}
  - publish_dashboard_grafana
  {%- endif %}


build_project:
  stage: build
  image: gradle:7.5.1-jdk${{ values.javaVersion }}-alpine
  variables:
    DOCKER_REGISTRY: {% if values.docker_window == 'custom' %}${{ values.docker_generic }}{% else %}registry.hub.docker.com{% endif %}
    DOCKER_NAMESPACE: ${{ values.docker_organization }}
    DOCKER_USERNAME: $DOCKER_USERNAME
    DOCKER_PASSWORD: $DOCKER_PASSWORD
    GRADLE_OPTS: "-Dquarkus.kubernetes.ports.http.host-port=4003"
    GRADLE_BUILD_OPTS: "-Dquarkus.container-image.registry=$DOCKER_REGISTRY \
                        -Dquarkus.container-image.group=$DOCKER_NAMESPACE \
                        -Dquarkus.kubernetes.namespace=vkpr \
                        -Dquarkus.kubernetes.ingress.expose=true \
                        -Dquarkus.kubernetes.ingress.ingress-class-name=kong \
                        -Dquarkus.kubernetes.ingress.host=rest.apr.vee.codes \
                        -Dquarkus.kubernetes.ingress.tls.\"rest.apr.vee.codes-tls\".enabled=true \
                        -Dquarkus.kubernetes.ingress.tls.\"rest.apr.vee.codes-tls\".hosts=rest.apr.vee.codes \
                        -Dquarkus.kubernetes.ingress.annotations.\"backstage.io/kubernetes-id\"=spring-sample-app \
                        -Dquarkus.kubernetes.ingress.annotations.\"cert-manager.io/cluster-issuer\"=certmanager-issuer \
                        -Dquarkus.kubernetes.ingress.annotations.\"konghq.com/https-redirect-status-code\"=308 \
                        -Dquarkus.kubernetes.ingress.annotations.\"konghq.com/preserve-host\"=true \
                        -Dquarkus.kubernetes.ingress.annotations.\"konghq.com/protocols\"=https \
                        -Dquarkus.kubernetes.ingress.annotations.\"konghq.com/strip-path\"=true \
                        -Dquarkus.kubernetes.ingress.annotations.\"kubernetes.io/tls-acme\"=true"
  script:
    - ./gradlew clean build $GRADLE_OPTS $GRADLE_BUILD_OPTS
   {%- if values.exportKongKubernetes %}
    - npx insomnia-inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml
   {%- endif %}

publish_k8s:
  stage: publish_k8s
  variables:
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $API_TOKEN_GITLAB
  before_script:
    - apt-get update
    - apt-get install -y git
    - apt-get update && apt-get install -y apt-transport-https gnupg2 curl 
    - curl -sL https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq
    - yq --version
    - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    - apt-get update && apt-get install -y kubectl
  script:
    - mkdir k8s/
    - kubectl create deployment spring-sample-app --namespace=vkpr --port=8080 --replicas=1 --image=docker.io/veecode/spring-sample-app:latest --dry-run=client -o=yaml > ./k8s/deployment.yaml
    - yq e '.metadata.labels."backstage.io/kubernetes-id"="spring-sample-app" | .spec.template.metadata.labels."backstage.io/kubernetes-id"="spring-sample-app" | .spec.template.spec.containers[0].imagePullPolicy="IfNotPresent" | .spec.template.spec.containers[0].resources.requests.memory="256Mi" | .spec.template.spec.containers[0].resources.limits.memory="512Mi" | del(.status) | del(.metadata.creationTimestamp) | del(.spec.template.metadata.creationTimestamp) | del(.spec.strategy)' -i ./k8s/deployment.yaml
    - kubectl create service clusterip spring-sample-app --namespace=vkpr --tcp=8080:8080 --dry-run=client -o=yaml > ./k8s/service.yaml
    - yq e 'del(.metadata.creationTimestamp) | del(.status) | .metadata.labels."backstage.io/kubernetes-id"="spring-sample-app"' -i ./k8s/service.yaml
    - kubectl create ingress spring-sample-app --class=kong --namespace=vkpr --annotation "cert-manager.io/cluster-issuer"="certmanager-issuer" --annotation "konghq.com/https-redirect-status-code"="308" --annotation "kubernetes.io/tls-acme"="true" --annotation "konghq.com/strip-path"="true" --annotation "konghq.com/preserve-host"="true" --annotation "konghq.com/protocols"="https" --rule="rest.apr.vee.codes/spring-sample-app*=spring-sample-app:8080,tls=rest.apr.vee.codes-tls" --dry-run=client -o=yaml > ./k8s/ingress.yaml
    - yq e 'del(.metadata.creationTimestamp) | del(.status)' -i ./k8s/ingress.yaml
    - yq e '.metadata.labels."backstage.io/kubernetes-id"="spring-sample-app"' -i ./k8s/ingress.yaml
    - git clone -b ${{ values.argoRepoBranch }} https://oauth2:$API_TOKEN_GITLAB@gitlab.com/${{ values.argoRepoUrl }}.git
    - cp -r k8s ${{ values.argoRepo }}/${{ values.componentId }}
    - cd ${{ values.argoRepo }}
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$CI_REGISTRY_USER"
    - git add .
    - git commit -m "Add Kubernetes files" --allow-empty
    - git push origin ${{ values.argoRepoBranch }}
    
{%- if values.kongExport %}    
export_kong_kubernetes:
  stage: export_kong
  before_script:
    - apt-get update && apt-get -y install wget
    - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    - chmod a+x /usr/local/bin/yq
    - yq --version
  script:
    - test -f .insomnia/ApiSpec/spc_*.yml && export WORKSPACE_EXISTS=true || export WORKSPACE_EXISTS=false
    - apt-get -y install jq;
    - curl -sSfL https://github.com/Kong/setup-inso/releases/download/v1/setup-inso_1.1.0_linux_amd64.tar.gz | tar -xz -C /usr/local/bin;
    - inso version;
    - inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')"  --output ./openapi-swagger.yaml;
    - inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml;
{%- endif %}

publish-spec:
  stage: publish_spec
  variables:
    MOCK_SERVER: "${{ values.mockserverUrl }}"
    NAME: ${{ values.componentId }}
    {%- if values.specTags == "custom" %}
    TAGS: "{% for tag in values.tags | string | list %}${{ tag }}{% endfor %}"
    {%- endif %}
  before_script:
    - apt-get update && apt-get -y install wget python3.9 jq git curl xz-utils
    - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    - chmod a+x /usr/local/bin/yq
    - yq --version
    - curl -SfL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python3 get-pip.py --user
    - export PATH="$HOME/.local/bin:$PATH"
    - pip3 --version
    - pip3 install pyyaml
  script:
    - test -f .insomnia/ApiSpec/spc_*.yml && export WORKSPACE_EXISTS=true || export WORKSPACE_EXISTS=false
    - |
        if [ $WORKSPACE_EXISTS = true ]; then
        apt-get -y install jq;
        curl -SfL https://github.com/Kong/insomnia/releases/download/lib@3.14.0/inso-linux-3.14.0.tar.xz -o inso.tar.xz
        tar -xvf inso.tar.xz -C /usr/local/bin/ inso
        inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')"  --output ./openapi-swagger.yaml;
        fi
    - |
        if [ $WORKSPACE_EXISTS = true ] && [ -n "$MOCK_SERVER" ]; then
        touch MOCK.yaml
        yq 'with(.paths; with_entries(.key |=strenv(NAME) + .))' ./openapi-swagger.yaml >> MOCK.yaml
        cat MOCK.yaml | python3 -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))' > MOCK.json
        curl --max-time 30 -v -X PUT "${MOCK_SERVER%/}/mockserver/openapi${API_KEY:+?apikey=$API_KEY}" -d "{\"specUrlOrPayload\": $(cat $PWD/MOCK.json)}" || true;
        echo "Adding mockserver address to spec";
        yq ".servers += [{\"url\": \"$MOCK_SERVER $([[ ! "$MOCK_SERVER" == */ ]] && echo "/")${NAME}\"}]" -i ./openapi-swagger.yaml
        fi
    - echo "Spechouse Publish"
    - ls
    - mkdir -p api/
    - echo $NAME
    - touch "api/$NAME.yaml"
    - sed --in-place "s|\"|'|g" ./openapi-swagger.yaml
    - yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i "api/$NAME.yaml"
    - yq eval ".kind = \"API\" " -i "api/$NAME.yaml"
    - yq eval ".metadata.name=\"$NAME\"" -i "api/$NAME.yaml"
    - yq eval ".metadata.title=\"$NAME\"" -i "api/$NAME.yaml"
    - yq eval ".metadata.publishedAt=\"$(date '+%Y-%m-%d %T')\"" -i "api/$NAME.yaml"
    - yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i "api/$NAME.yaml"
    {%- if values.specTags == "custom" %}
    - yq eval ".metadata.tags = (\"$TAGS\" | split(\",\") | map(sub(\" +\", \"\")))" -i "api/$NAME.yaml"
    {%- endif %}
    - yq eval ".spec.type = \"openapi\"" -i "api/$NAME.yaml"
    - yq eval ".spec.lifecycle = \"production\"" -i "api/$NAME.yaml"
    - yq eval ".spec.owner = \"${{ values.owner }}\"" -i "api/$NAME.yaml"
    - yq eval ".spec.definition = \"$(yq -I4 e '.')\"" -i "api/$NAME.yaml"
    - git config --global user.name "$CI_REGISTRY_USER"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git clone -b ${{ values.specPublishBranch }} https://oauth2:$API_TOKEN_GITLAB@gitlab.com/${{ values.specPublish }}.git
    - cp -f ./api/$NAME.yaml ./${{ values.specPublishRepo }}/api
    - cd ${{ values.specPublishRepo }}
    - git add .
    - git commit -m "Pipeline commit" --allow-empty
    - git push  origin ${{ values.specPublishBranch }}
    

{%- if values.observability_window == "custom" %}
publish_dashboard_grafana:
 stage: publish_dashboard_grafana
 variables:
   GRAFANA_URL: "${{ values.observability_grafana }}"
   UID_TRACE_DASHBOARD: ""
   UID_LOG_DASHBOARD: ""
   UID_METRICS_DASHBOARD: ""
 script:
    - apt-get update -qy
    - apt-get install -y curl jq
    - |
      export GRAFANA_API_TOKEN=$GRAFANA_API_TOKEN
      export CHECKED_URL=${GRAFANA_URL%/}
      export UID_TRACE_DASHBOARD=$(curl -H "Authorization: Bearer $GRAFANA_API_TOKEN" --url $CHECKED_URL/api/datasources | jq '.[] | select(.type == "jaeger")'.uid)
      echo "UID_TRACE = $UID_TRACE_DASHBOARD"
      export UID_LOG_DASHBOARD=$(curl -H "Authorization: Bearer $GRAFANA_API_TOKEN" --url $CHECKED_URL/api/datasources | jq '.[] | select(.type == "loki")'.uid)
      echo "UID_LOG = $UID_LOG_DASHBOARD"
      export UID_METRICS_DASHBOARD=$(curl -H "Authorization: Bearer $GRAFANA_API_TOKEN" --url $CHECKED_URL/api/datasources | jq '.[] | select(.type == "prometheus")'.uid)
      echo "UID_METRICS = $UID_METRICS_DASHBOARD"
      jq '(.dashboard.panels[].datasource | select(.type == "jaeger")).uid |= env.UID_TRACE_DASHBOARD' "dashboards/jaeger-trace.json" > $CI_PROJECT_PATH-jaeger-trace.json
      cat $CI_PROJECT_PATH-jaeger-trace.json
      jq '(.dashboard.panels[].datasource | select(.type == "loki")).uid |= env.UID_LOG_DASHBOARD' "dashboards/loki-logs.json" > $CI_PROJECT_PATH-loki-logs.json
      cat $CI_PROJECT_PATH-loki-logs.json
      jq '(.dashboard.panels[].datasource | select(.type == "prometheus")).uid |= env.UID_METRICS_DASHBOARD' "dashboards/kong-metrics.json" > $CI_PROJECT_PATH-kong-metrics.json
      cat $CI_PROJECT_PATH-kong-metrics.json
      curl -X POST -d @$CI_PROJECT_PATH-jaeger-trace.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $GRAFANA_API_TOKEN" \
      --url $CHECKED_URL/api/dashboards/db
      curl -X POST -d @$CI_PROJECT_PATH-kong-metrics.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $GRAFANA_API_TOKEN" \
      --url $CHECKED_URL/api/dashboards/db
      curl -X POST -d @$CI_PROJECT_PATH-loki-logs.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $GRAFANA_API_TOKEN" \
      --url $CHECKED_URL/api/dashboards/db
 {%- endif %}